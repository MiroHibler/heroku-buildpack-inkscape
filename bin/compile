#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>
YELLOW='\033[1;33m'
RED='\033[1;31m'
RESET='\033[0m'

# Console utilities
function error() {
	echo -e " !     $*" >&2
	exit 1
}

function indent() {
	c='s/^/       /'
	case $(uname) in
		Darwin) sed -l "$c";;
		*)      sed -u "$c";;
	esac
}

function topic() {
	echo -e
	echo -e "-----> $*"
}

topic "${YELLOW}Inkscape buildpack WARNING:"
echo -e "This buildpack is no longer maintained." | indent
echo -e | indent
echo -e "Please use Heroku maintained buildpack https://github.com/heroku/heroku-buildpack-apt.git" | indent
echo -e "and follow their instructions." | indent
echo -e | indent

# Don't run after expiry date
# echo -e "This buildpack will cease to function at the stroke of midnight on July 1, 2017.${RESET}" | indent

# [ $(date +%Y%m%d%H%M%S) -gt "20170701000000" ] && exit 1

echo -e "This buildpack will only test existing Inscape installation." | indent
echo -e "Therefore it should run at the end of the buildpacks list.${RESET}" | indent

# Load config vars into environment (from https://devcenter.heroku.com/articles/buildpack-api)
function export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir $3

# Enable verbose debugging if configured to -- though this has to come after
# we've loaded environment configs.
set -e

if [ -n "${BUILDPACK_VERBOSE+1}" ]; then
  set -x
fi

# Get the directory our app is checked out in (the "BUILD_DIR"), passed by Heroku
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}

#
# Show current environment
#
# topic "Current environment"
# echo -e "${RED}"
# env | indent
# echo -e "${RESET}"

#
# Install Perl XML::Parser
#
# topic "Installing Perl XML::Parser..."
# curl --silent -L http://cpanmin.us | perl - -l ~/perl5 App::cpanminus local::lib
# eval `perl -I ~/perl5/lib/perl5 -Mlocal::lib`
# cpanm -n XML::Parser

#
# Install GSL
#
# topic "Installing gsl..."
# mkdir -p "$BUILD_DIR/.gsl"
# cd "$BUILD_DIR/.gsl"
# wget https://ftp.gnu.org/gnu/gsl/gsl-2.4.tar.gz
# tar -xf gsl-2.4.tar.gz
# cd gsl-2.4
# ./configure
# make
# make DESTDIR=$BUILD_DIR/gsl install
# export LIBRARY_PATH="$BUILD_DIR/gsl":$LIBRARY_PATH
# export LIBRARY_PATH="$BUILD_DIR/gsl/lib":$LIBRARY_PATH
# export LD_LIBRARY_PATH="$BUILD_DIR/gsl":$LD_LIBRARY_PATH
# export LD_LIBRARY_PATH="$BUILD_DIR/gsl/lib":$LD_LIBRARY_PATH

#
# Install intltool
#
# topic "Installing intltool..."
# mkdir -p "$BUILD_DIR/.intltool"
# cd "$BUILD_DIR/.intltool"
# wget https://launchpad.net/intltool/trunk/0.51.0/+download/intltool-0.51.0.tar.gz
# tar -xf intltool-0.51.0.tar.gz
# cd intltool-0.51.0
# ./configure
# make

#
# Install cmake
#
# topic "Installing cmake..."
# mkdir -p "$BUILD_DIR/.cmake/"
# cd "$BUILD_DIR/.cmake/"
# curl https://cmake.org/files/v3.8/cmake-3.8.2.tar.gz -s -O
# tar -xf cmake-3.8.2.tar.gz
# cd cmake-3.8.2
# ./bootstrap
# make
# make DESTDIR=$BUILD_DIR/cmake install
# export PATH="$BUILD_DIR/cmake/usr/local/bin":$PATH
# export PATH="$BUILD_DIR/vendor/cmake/bin":$PATH

#
# Install Inkscape
#
# topic "Installing Inkscape..."
# mkdir -p "$BUILD_DIR/.inkscape/"
# cd "$BUILD_DIR/.inkscape/"
# wget https://inkscape.org/gallery/item/10682/inkscape-0.92.1.tar_XlpI7qT.bz2
# tar -xf inkscape-0.92.1.tar_XlpI7qT.bz2
# cd inkscape-0.92.1
#
# topic "Installing gtest..."
# ./download-gtest.sh
# export PATH="$BUILD_DIR/.inkscape/inkscape-0.92.1/gtest":$PATH

# Inkscape version 0.92 and newer can be build using cmake:
# mkdir build
# cd build
# cmake ..
# make
# make install

# We also still include autoconf in 0.92 as an alternate build system, in
# case anything goes haywire with the new cmake scripts:
# ./autogen.sh   # Optional, use if configure doesn't exist
# ./configure
# make
# make install

# export PATH="$BUILD_DIR/.inkscape/inkscape-0.92.1/bin":$PATH

# Test Inkscape
# https://github.com/duhast/heroku-inkscape-test
topic "Testing Inkscape..."
#ldd $(which inkscape) | grep found
IS_VERSION=`inkscape --version --without-gui `
echo -e "${IS_VERSION}" | indent

# List installed fonts
topic "Listing installed fonts..."
identify -list font | grep Font: | indent

# Test file conversion
topic "Testing conversion..."
FILE1=/tmp/ink$RANDOM.png
FILE2=/tmp/ink$RANDOM.svg

inkscape --without-gui --file=./test/data/drawing.svg \
  --export-area-drawing --export-text-to-path --vacuum-defs --export-plain-svg=$FILE2 \
  --export-width=1024 --export-png=$FILE1 | indent

# Upload test files for examination
topic "Uploading test files..."
curl --upload-file $FILE1 https://transfer.sh/$(basename $FILE1) | indent
curl --upload-file $FILE2 https://transfer.sh/$(basename $FILE2) | indent
